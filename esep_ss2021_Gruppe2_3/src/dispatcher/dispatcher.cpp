#include "dispatcher.h"
#include <errno.h>
#include <sys/dispatch.h>
#include <utils/connManagement/QnxConnection.h>

namespace dispatcher {

dispatcher::dispatcher(std::unique_ptr<connManagement::QnxChannel> ipc) :
        _channel(std::move(ipc)) {
    _dispatcher_thread = std::thread([this] {this->run();});
}

dispatcher::~dispatcher() {
    _is_running = false;
    connManagement::QnxConnection(_channel->get_chid()).msg_send_pulse(1, _PULSE_CODE_UNBLOCK, 0);
    _dispatcher_thread.join();
}

void dispatcher::run() {
    while (_is_running) {
        connManagement::header_t header;
        connManagement::MsgType type = _channel->msg_receive(&header, sizeof(connManagement::header_t));

        if (type == connManagement::MsgType::error) {
            //TODO logging or exception
            break;
        }

        if (type == connManagement::MsgType::puls) { // Pulse was received
            if (header.code == _PULSE_CODE_UNBLOCK) {
                continue;
            }
            handle_event(header);
            continue;
        }

        //else type == sync

        if ((_IO_BASE <= header.type) && (header.type <= _IO_MAX)) {
            // Some QNX IO msg generated by gns was received
            handle_qnx_io_msg(header);
            continue;
        }

        handle_sync_msg(header);
    }
}
void dispatcher::handle_sync_msg(connManagement::header_t header) {
    if (SUB_MSG == header.type) {//when is event subscr
        int ret[1] = {0};
        EventSubscription subscription;
        _channel->msg_read(&subscription, sizeof(subscription), sizeof(header));
        subscribe(subscription.number, subscription.channel_id);
        _channel->msg_reply(EOK, ret, sizeof(ret));
        std::cout<<"subscribed"<<std::endl;
    }
    //maybe other forms of sync communications
}

void dispatcher::subscribe(int event_id, connManagement::chid chid) {
    if (_chid_conn_map.find(chid) == _chid_conn_map.end()) { //no connection for this chid yet
        _chid_conn_map[chid] = std::shared_ptr<connManagement::QnxConnection>(
                new connManagement::QnxConnection(chid));
    }
    _evnt_conn_multimap[event_id].insert(_chid_conn_map[chid]);
}

void dispatcher::handle_event(connManagement::header_t header) {
    int evnt_id = header.code;
    int evnt_value = header.value.sival_int;
    std::cout << "dispatcher recieved following event:" << std::endl;
    std::cout << "id: " << evnt_id << std::endl;
    std::cout << "value: " << evnt_value << std::endl;

    for (auto& connection : _evnt_conn_multimap[evnt_id]) {
        connection->msg_send_pulse(1, evnt_id, evnt_value);
    }
}

void dispatcher::handle_qnx_io_msg(connManagement::header_t header) {
    if (header.type == _IO_CONNECT) {
        // QNX IO msg _IO_CONNECT was received; answer with EOK
        std::cout << "Dispatcher received _IO_CONNECT (sync. msg) \n" << std::endl;
        _channel->msg_reply(EOK, nullptr, 0);
        return;
    }
    // Some other QNX IO message was received; reject it
    std::cout << "Dispatcher received unexpected (sync.) msg type = " << header.type << std::endl;
    _channel->msg_reply_error(ENOSYS);
}

} /* namespace dispatcher */
