#include <dispatcher/DispatcherClient.h>
#include <sys/dispatch.h>

namespace dispatcher {



DispatcherClient::DispatcherClient(const std::string& disp_name, std::unique_ptr<connManagement::IIpcChannel> channel):
        _dispatcher_name{disp_name}, _channel(std::move(channel)) {
    _dispatcher_connection = std::unique_ptr<connManagement::IIpcConnection>(new connManagement::QnxConnection(_dispatcher_name));
    _client_thread = std::thread([this] {this->run();});
}

DispatcherClient::~DispatcherClient() {
    _is_running = false;
    connManagement::QnxConnection(_channel->get_chid()).msg_send_pulse(1, _PULSE_CODE_UNBLOCK, 0);
    _client_thread.join();
}

void DispatcherClient::subscribe_evnt(uint8_t evnt_nr){
    connManagement::header_t header;
    EventSubscription sub;
    iov_t iov[2];
    int r_msg[1];

    header.type = SUB_MSG;
    header.subtype = 0x00;
    sub.channel_id =_channel->get_chid();
    sub.number = evnt_nr;

    SETIOV(iov+0, &header, sizeof(header));
    SETIOV(iov+1, &sub, sizeof(sub));
    if (-1 == _dispatcher_connection->msg_send(iov, 2, r_msg, sizeof(r_msg))){
        perror("Client: MsgSend failed");
        exit(EXIT_FAILURE);
    }
}
void DispatcherClient::send_evnt(Event event, int priority){
    _dispatcher_connection->msg_send_pulse(priority, event.number, event.payload);
}

void DispatcherClient::run() {
    while (_is_running) {
        connManagement::header_t header;
        int rcvid = _channel->msg_receive(&header, sizeof(connManagement::header_t));

        if (rcvid == -1) {
            //TODO logging or exception
            break;
        }

        if (rcvid == 0) { // Pulse was received
            if (header.code == _PULSE_CODE_UNBLOCK) {
                continue;
            }
            handle_event(header, rcvid);
            continue;
        }

        if ((_IO_BASE <= header.type) && (header.type <= _IO_MAX)) {
            // Some QNX IO msg generated by gns was received
            handle_qnx_io_msg(header, rcvid);
            continue;
        }
        // TODO handling for unsupported sync message
    }
}

void DispatcherClient::handle_event(connManagement::header_t header, int rcvid) {
    Event event;
    event.number = header.code;
    event.payload = header.value.sival_int;
    handle(event);
}

void DispatcherClient::handle_qnx_io_msg(connManagement::header_t header, int rcvid) {
    if (header.type == _IO_CONNECT) {
        // QNX IO msg _IO_CONNECT was received; answer with EOK
        std::cout << "Dispatcher received _IO_CONNECT (sync. msg) \n" << std::endl;
        _channel->msg_reply(rcvid, EOK, nullptr, 0);
        return;
    }
    // Some other QNX IO message was received; reject it
    std::cout << "Dispatcher received unexpected (sync.) msg type = " << header.type << std::endl;
    _channel->msg_reply_error(rcvid, ENOSYS);
}

} /* namespace dispatcher */
